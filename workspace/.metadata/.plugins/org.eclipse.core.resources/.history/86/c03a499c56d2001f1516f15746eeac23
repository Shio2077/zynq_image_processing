#include<xil_types.h>
#include<string.h>
#include<xil_io.h>
#include<xparameters.h>
#include<xil_cache.h>
#include"img.h"


#define IMG_WIDTH       640
#define IMG_HEIGHT      480
#define BYTES4PX         3
#define MM2SCR_OFFSET   0x00
#define MM2SSA1_OFFSET  0x5C
#define MM2SSA2_OFFSET  0x60
#define MM2SSA3_OFFSET  0x64
#define MM2SSTD_OFFSET  0x58
#define MM2SHZ_OFFSET   0x54
#define MM2SVZ_OFFSET   0x50

//u8 image[IMG_WIDTH*IMG_HEIGHT*BYTES4PX];


int main(){
    // Task 1: Display white screen
	u8 *p_img = image;
	memset(p_img, 0xB3, IMG_WIDTH*IMG_HEIGHT*BYTES4PX);
    Xil_DCacheFlush();

	// Task 2: Configure VDMA controller to fetch image data to PL
	// Step 1: Configure and start VDMA MM2S channel
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SCR_OFFSET, 1);

	// Step 2: Configure image start address
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SSA1_OFFSET, (u32)p_img);
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SSA2_OFFSET, (u32)p_img);
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SSA3_OFFSET, (u32)p_img);

	// Step 3: Configure strip(?) length(image frame byte length)
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SSTD_OFFSET, IMG_WIDTH*BYTES4PX);

	// Step 4: Configure resolution
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SHZ_OFFSET, IMG_WIDTH*BYTES4PX);
	Xil_Out32(XPAR_AXI_VDMA_0_BASEADDR + MM2SVZ_OFFSET, IMG_HEIGHT);

}
